{"version":3,"sources":["icons/twitter.svg","components/Quote.js","components/QuoteMachine.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Quote","quote","text","author","id","tweetIntent","tweetText","encodeURI","randomItem","arr","Math","floor","random","length","QuoteMachine","React","useState","quotes","setQuote","className","onClick","href","title","target","rel","src","twitterIcon","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"skdAAAA,EAAOC,QAAU,IAA0B,qC,uICW5BC,EATD,SAAC,GAAD,QAAGC,MAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,OAAlB,OACZ,oCACE,yBAAKC,GAAG,QAAQF,GAChB,yBAAKE,GAAG,UACN,gCAAMD,M,uBCDNE,EAAc,SAACJ,GACnB,IAAMK,EAAYC,UAAUN,EAAMC,KAAO,OAASD,EAAME,QACxD,MAAM,yCAAN,OAAgDG,IAG5CE,EAAa,SAACC,GAAD,OAASA,EAAIC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,UAgChDC,EA9BM,WAAO,IAAD,EACCC,IAAMC,SAASR,EAAWS,IAD3B,mBAClBhB,EADkB,KACXiB,EADW,KAOzB,OACE,yBAAKd,GAAG,aACN,kBAAC,EAAD,CAAOH,MAAOA,IAEd,yBAAKG,GAAG,cACN,4BAAQA,GAAG,YAAYe,UAAU,SAASC,QAT5B,WAClBF,EAASV,EAAWS,MAQhB,aAGA,uBACEI,KAAMhB,EAAYJ,GAClBG,GAAG,cACHe,UAAU,SACVG,MAAM,kBACNC,OAAO,SACPC,IAAI,uBAEJ,yBAAKpB,GAAG,eAAeqB,IAAKC,IAAaC,IAAI,gBCtBxCC,EAVH,kBACV,oCACE,gCACE,qDAGF,kBAAC,EAAD,Q,MCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.94a8e500.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter.7f8e365b.svg\";","import React from \"react\";\r\n\r\nconst Quote = ({ quote: { text, author } }) => (\r\n  <>\r\n    <div id=\"text\">{text}</div>\r\n    <div id=\"author\">\r\n      <i>- {author}</i>\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default Quote;\r\n","import React from \"react\";\r\nimport Quote from \"./Quote\";\r\nimport quotes from \"../data/quotes.json\";\r\nimport twitterIcon from \"../icons/twitter.svg\";\r\n\r\nconst tweetIntent = (quote) => {\r\n  const tweetText = encodeURI(quote.text + \"\\n- \" + quote.author);\r\n  return `https://twitter.com/intent/tweet?text=${tweetText}`;\r\n};\r\n\r\nconst randomItem = (arr) => arr[Math.floor(Math.random() * arr.length)];\r\n\r\nconst QuoteMachine = () => {\r\n  const [quote, setQuote] = React.useState(randomItem(quotes));\r\n\r\n  const setNewQuote = () => {\r\n    setQuote(randomItem(quotes));\r\n  };\r\n\r\n  return (\r\n    <div id=\"quote-box\">\r\n      <Quote quote={quote} />\r\n\r\n      <div id=\"button-box\">\r\n        <button id=\"new-quote\" className=\"button\" onClick={setNewQuote}>\r\n          New quote\r\n        </button>\r\n        <a\r\n          href={tweetIntent(quote)}\r\n          id=\"tweet-quote\"\r\n          className=\"button\"\r\n          title=\"Tweet the quote\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img id=\"twitter-icon\" src={twitterIcon} alt=\"Twitter\" />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteMachine;\r\n","import React from \"react\";\nimport QuoteMachine from \"./QuoteMachine\";\n\nconst App = () => (\n  <>\n    <header>\n      <h1>Random Quote Machine</h1>\n    </header>\n\n    <QuoteMachine />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}